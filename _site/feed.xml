<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prototypes</title>
    <description>Brief collection of projects I have recently been tinkering with.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 21 Mar 2021 23:25:59 -0700</pubDate>
    <lastBuildDate>Sun, 21 Mar 2021 23:25:59 -0700</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>

    
      <item>
        <title>Covid-iOS - Daily count of cases of COVID-19</title>
        <description>&lt;p&gt;During the 2020 quarantine, I decided to spend some time learning SwiftUI and a few other technologies that have been on my to-do list for far too long. What better idea than to build an application that spreads awareness of the coronavirus itself? Covid-iOS is an application that displays daily cases of COVID-19 by states/regions in USA. The subsections detail how many of those patients were hospitalized, recovered, passed away and are still testing positive. I was able to use SwiftUI and the MVVM architecture to build out this project relatively quickly and leave room for building future features seamlessly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/covid/iOS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To familiarize myself with Continuous Integration and Continuous Delivery (CI/CD) systems within the iOS environment, this project also leveraged GitHub Actions which is run on every Pull Request (PR). This system ensures the project builds successfully and all unit/integration tests pass before the option to merge pull requests becomes available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/covid/watchOS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The beauty of SwiftUI shined on the project when porting from iOS to including a complementary watchOS target application. After a short amount of time and not many lines of code, the data flow of grabbing and storing API data was incredibly straightforward. Thanks to SwiftUI’s @State and @ObservedObject, the API data was stored universally leaving watchOS to simply grab and display such data. Lastly, the application’s user interface (UI) stays dynamic based on the user’s OS setting on whether they’re using light/dark mode!&lt;/p&gt;

&lt;p&gt;All in all using SwiftUI, instead of the industry-standard UIKit, was an effortless and uncomplicated experience. The declarative programming approach of SwiftUI went hand in hand with using the MVVM architecture, resulting in an efficient and versatile codebase.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/avijeets/covid-ios&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jul 2020 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/covid/</link>
        <guid isPermaLink="true">http://localhost:4000/covid/</guid>
      </item>
    
      <item>
        <title>HackerNews - Browse HackerNews submissions on iOS</title>
        <description>&lt;p&gt;Introduced with Xcode 11, I decided to try out the new SwiftUI library to build out the UI of a master-detail application of HackerNews posts. This project pulls Hacker News submissions through the &lt;a href=&quot;http://hn.algolia.com/api/&quot;&gt;Algolia API&lt;/a&gt; and displays them in a SwiftUI List (formerly known as UITableView within UIKit) with their respective HN upvotes. Clicking into any cell will bring up a WKWebView displaying the URL of the post.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/avijeets/HackerNews-SwiftUI&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Nov 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/hackernews-ios/</link>
        <guid isPermaLink="true">http://localhost:4000/hackernews-ios/</guid>
      </item>
    
      <item>
        <title>SixthBoro - Realtime iOS application for PATH trains</title>
        <description>&lt;p&gt;Every city with a reliable public transportation system is seemingly matched with an unbelievably low-quality iOS application to display useful information to commuters. Obviously this proposition stands true for NJ PATH train riders as well. The official PATH iOS application (built with Xamarin) leaves much to be desired whether it be functionality or design. In situations trying to plan train schedules in a hurry, users are often left waiting as the application loads inefficently or left fiddling endlessly trying to make sense of the hard-to-understand user interface.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;version-10&quot;&gt;Version 1.0&lt;/h3&gt;

&lt;p&gt;After a couple weeks of designing, prototyping, and refactoring my take on a PATH iOS application, I’m happy to showcase the current state of &lt;a href=&quot;https://sixthboro.app&quot;&gt;SixthBoro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/sixthboro/share.PNG&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Share train times seamlessly by swiping on the train cell.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;SixthBoro, named after the common phrase used to describe Jersey City and Hoboken as being New York City’s next borough, is a lightweight and reliable application to seamlessly check train times. The application is packed with iOS features to improve the user experience and provide a quick way to get the information you need.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/sixthboro/time.PNG&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;SixthBoro allows for users to tap between relative and local times seamlessly.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Contrary to the publicly available official PATH app, SixthBoro’s UI aims to be very straightforward, simple, and clean. There is no interest in bogging down the experience by showing you information you likely won’t need on a realtime basis, such as untimely alerts or links to PATH’s website. The goal is to show you realtime train data for you to better plan your schedule with a personable, iOS user experience. Alongside straightforward functionality, SixthBoro displays useful information like train status, train line color, and time until a train arrives to the given station. Lastly, if you happen to pull up SixthBoro at a later time, you can even pull-to-refresh the train data and get a realtime result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/sixthboro/favorites.PNG&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Favorite the stations you frequent.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Commuters can now set favorite stations which they commonly frequent reducing the work of navigating throughout the application just to find desired results. With SixthBoro, you can even set up notifications for specific trains giving commuters the comfort of not having to check back on train times so often. Another simple feature we’ve gotten great feedback on is the ability to switch between relative and local time providing better context on scheduling times.&lt;/p&gt;

&lt;p&gt;It has been incredibly fun building an application that could be immensely helpful to any commuter traveling by way of PATH on a regular basis. Feel free to leave me a note if you have any suggestions or comments at sixthboroapp@gmail.com!&lt;/p&gt;

&lt;h3 id=&quot;status&quot;&gt;Status&lt;/h3&gt;

&lt;p&gt;The application is now live on the Apple App Store! You can try the most recent version on your iOS devices and hopefully have a great experience in doing so.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sixthboro.app&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See the SixthBoro website&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Aug 2019 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/sixthboro/</link>
        <guid isPermaLink="true">http://localhost:4000/sixthboro/</guid>
      </item>
    
      <item>
        <title>AR Posters - Music video posters with Augmented Reality</title>
        <description>&lt;p&gt;I’ve been interested in learning how iOS applications can provide engaging Augmented Reality experiences since Apple released the ARKit framework in 2017. Much to my surprise, the framework is backed by comprehensive documentation making it incredibly straightforward for someone with proficient iOS knowledge to build an AR experience. One capability within ARKit I decided to hone in on was the quick image detection. With the capability of detecting if a specified image appears in the camera’s view, I decided to overlay the image with a music video using the rendering engine SceneKit.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/images/posts/ar-posters/app.gif&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Overlaying A Tribe Called Quest’s Low End Theory album cover with the We Got the Jazz music video.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that Apple is releasing ARKit 3 with iOS 13, I’m excited to play with the new features such as People Occlusion. This allows for someone to walk in front of or behind an object on the AR plane thus creating an even more immersive experience. With image detection, overlay and people occlusion, the potential for Augmented Reality is vast.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/avijeets/AR-Posters&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Jul 2019 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/ar-posters/</link>
        <guid isPermaLink="true">http://localhost:4000/ar-posters/</guid>
      </item>
    
      <item>
        <title>DropDiscuss - Communities for vinyl enthusiasts</title>
        <description>&lt;p&gt;An iOS application that seamlessly lets users create posts and groups related to music album (specifically vinyl) releases. Users can compose messages for a global feed or for their group’s active members. The application is built with iOS, Swift 4.2, and Firebase.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dropdiscuss/one.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/posts/dropdiscuss/three.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/avijeets/DropDiscuss&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 May 2019 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/dropdiscuss/</link>
        <guid isPermaLink="true">http://localhost:4000/dropdiscuss/</guid>
      </item>
    
      <item>
        <title>Naval API - Retrieve quotes by Naval Ravikant</title>
        <description>&lt;p&gt;This project exposes a JSON API for users to make GET requests and retrieve specific collections of quotes by AngelList co-founder and self-proclaimed philosopher Naval Ravikant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/naval/landing.png&quot; alt=&quot;Landing page for API&quot; /&gt;
&lt;em&gt;Landing page for the Naval API&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/naval/json.png&quot; alt=&quot;Example output&quot; /&gt;
&lt;em&gt;Example JSON output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/avijeets/naval-api&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Apr 2019 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/naval-api/</link>
        <guid isPermaLink="true">http://localhost:4000/naval-api/</guid>
      </item>
    
      <item>
        <title>Qualia - Mindful mood tracking</title>
        <description>&lt;p&gt;I took a philosophy course during my senior year at Rutgers called &lt;a href=&quot;https://philosophy.rutgers.edu/197-undergraduate/course-descriptions/fall-2016/826-phil-329-minds-machines-and-persons&quot;&gt;Mind, Machines, and Persons&lt;/a&gt; which opened my eyes to the implications that face a society that adopts technology as quickly as it has. A ubiquitous experience is feeling consistently lonely while society is more closely connected online than ever before.&lt;/p&gt;

&lt;p&gt;However there are unique individual experiences to the many advancemenets of technology, such as split views on the potential rise of AI guiding society, that can be classified as &lt;em&gt;qualia&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Philosophers often use the term ‘qualia’ to refer to the introspectively accessible, phenomenal aspects of our mental lives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/qualia/one.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mission&quot;&gt;Mission&lt;/h3&gt;

&lt;p&gt;This project came about from the notion of capturing the billions of qualia to everyday phenomena. I started off by building the foundation for an iOS application that could store journal entries and displaying them in an engaging manner. Fortunately, &lt;a href=&quot;http://ryans.exposed/&quot;&gt;Ryan&lt;/a&gt; helped take the project to the next level with a great sense of design. We added functionality for logging your mood on a subjective scale, and made the journal entry feature optional for saving a post. Furthermore with the data captured from the mood entry, we built in a line chart that would dynamically update and show the mood progression.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/qualia/two.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;privacy&quot;&gt;Privacy&lt;/h3&gt;

&lt;p&gt;It was extremely important for us to make privacy the main focus given the nature of journalling being a very personal experience. Obviously, using a remote database to store user entries were immediately ruled out. Fortunately there was a great solution for data persistence  on iOS applications that wasn’t &lt;a href=&quot;https://davedelong.com/blog/2018/05/09/the-laws-of-core-data/&quot;&gt;Core Data&lt;/a&gt; called Realm. I built in the functionality for Realm to store the entries on the device itself which keeps the entire application experience secure and private (and available offline!).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/qualia/three.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although this provides a better experience for users, it is impossible for us to leverage user data to grow the application the way users would want.  Without using a remote database, it is impossible for developers to see into user entries (good) but there isn’t a potential to use analytics or machine learning to better understand user behavior (bad). In fact with all entries being stored on the device, all user data can be lost by simply deleting the application or getting a different device. We built in a feature within the application to export entries to a CSV format to combat the issue of losing all user data. However, this is a risk we are more than willing to take with Qualia. Privacy is inherently important with the rise of technology and I’d be happier with slower growth if that meant for a safe, secure, and private user experience.&lt;/p&gt;

&lt;h3 id=&quot;status&quot;&gt;Status&lt;/h3&gt;

&lt;p&gt;I’m working on gathering user feedback on the current prototype and implementing features that would be helpful.&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Mar 2019 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/qualia/</link>
        <guid isPermaLink="true">http://localhost:4000/qualia/</guid>
      </item>
    
      <item>
        <title>Job Explorer - Quickly filter GitHub Jobs API results</title>
        <description>&lt;p&gt;A straightforward full-stack application that parses the GitHub Jobs API based off two user-inputted fields of job role and location. The application is built with Node.js, Express, and EJS to take in the API endpoint based off of the user inputs and display the objects that are returned.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ghj/one.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/avijeets/github-jobs&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Feb 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/github-jobs/</link>
        <guid isPermaLink="true">http://localhost:4000/github-jobs/</guid>
      </item>
    
      <item>
        <title>FocusLoop - Productivity tracking with watchOS</title>
        <description>&lt;p&gt;For a while, I have thought about how great and straightforward Apple Watch’s Activity loops are with displaying your daily physical activity. Imagine there was a similar diagram for your productivity levels.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;For optimal productivity, I like to set hourly goals ensuring I have something to consistently deliver to keep me on track. FocusLoop lets users set notification routines (triggered every X hours) asking if you are indeed staying productive. If the user prompts yes, the dialog box disappears. If the user prompts no, it brings you to a table of common distractions to let you log what kept you from your goals.&lt;/p&gt;

&lt;p&gt;The paired iOS application then shows (and persists, shout out Core Data) you the log of what held you from your hourly deliverables.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/avijeets/FocusLoop&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Oct 2018 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/focusloop/</link>
        <guid isPermaLink="true">http://localhost:4000/focusloop/</guid>
      </item>
    
      <item>
        <title>SpellCheck - Using Bloom Filters to recommend fixes to typos</title>
        <description>&lt;p&gt;In the Rutgers Computer Science course, &lt;a href=&quot;https://www.cs.rutgers.edu/courses/principles-of-programming-languages&quot;&gt;Principles of Programming Languages&lt;/a&gt;, I was able to learn more about programming language paradigms and how their compilers are built to execute in a specified manner. The coursework delved deep into Functional Programming with Scheme for a good portion of the course, and students were able to build out projects in a completely new approach. For example, we implemented a smart spell check which uses the probabilistic data structure, Bloom Filters, to determine if the word is potentially in a set of properly-spelled words.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/avijeets/SpellCheckInfrastructure&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Apr 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/spellcheck/</link>
        <guid isPermaLink="true">http://localhost:4000/spellcheck/</guid>
      </item>
    
      <item>
        <title>CLI Journal - Secure logs for Command Line</title>
        <description>&lt;p&gt;This project is a command-line interface application that allows for users to store, read, delete, and search for journal entries. CLI Journal is written with Python, Flask, and Peewee, while the journal entries are stored in SQLite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cli-journal/one.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/avijeets/cli-journal&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Mar 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/cli-journal/</link>
        <guid isPermaLink="true">http://localhost:4000/cli-journal/</guid>
      </item>
    
      <item>
        <title>Betadrop - Qualitative feedback system</title>
        <description>&lt;p&gt;My friend Kyle Ryan and I spent months researching the dearth of quantitative and qualitative feedback prevalent in modern technology platforms. As engineers learning the mobile iOS platform, our mission became:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Build a system that makes it easy for people to get feedback in order to make better decisions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/betadrop/one.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We did research on feedback pools and eventually delved down the path to solving three major findings: using gestures to provide feedback easier, building a novel feedback interface, and  visualizing results that could be understood at a glance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/betadrop/two.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@kylry/betadrop-announcement-5484778d0f25&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;Continue Reading on Medium&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Oct 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/betadrop/</link>
        <guid isPermaLink="true">http://localhost:4000/betadrop/</guid>
      </item>
    
      <item>
        <title>ConnectFour - Zero sum game for iMessage</title>
        <description>&lt;p&gt;At the developer conference WWDC in 2016, Apple had announced the release of an entire App Store comprised of applications solely meant to be shared with another recipient via iMessage. This announcement opened the doors for stickers, games, and posts to be shared between individuals/groups. My friend Amar and I decided to try out building the collaborative zero-zum ConnectFour game solely through the new iMessage API. Before the iOS had publicly launched and the iMessage App Store was eventually unveiled, Amar and I had finished our working copy of the ConnectFour game playable between two iMessage accounts.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: Potential breaking points are iPads and group chats!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/avijeets/connectfour&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Aug 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/connectfour/</link>
        <guid isPermaLink="true">http://localhost:4000/connectfour/</guid>
      </item>
    
      <item>
        <title>Slack Lyrics - Reference Genius song pages on Slack</title>
        <description>&lt;p&gt;SlackLyrics is a Node.js application that uses the Genius and Slack API to request a query and return the Genius reults in a Slack message.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/avijeets/SlackLyrics&quot;&gt;&lt;button class=&quot;c-btn c-btn--full&quot;&gt;See Source Code on GitHub&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/slack-lyrics/</link>
        <guid isPermaLink="true">http://localhost:4000/slack-lyrics/</guid>
      </item>
    
      <item>
        <title>Hoot - Online study groups</title>
        <description>&lt;p&gt;A couple friends and I came together to learn iOS and ship our first application to the Apple App Store in 2015. Hoot was set up to ease the stress of college classes with organizing all communication into the right pools.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hoot/one.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hoot is a community homework helper and event informer that provides a variety of features:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Ask questions to anyone in your college.&lt;/li&gt;
  &lt;li&gt;Answer questions from anyone in your college.&lt;/li&gt;
  &lt;li&gt;Create groups for your classes to ask/answer a specific array of people.&lt;/li&gt;
  &lt;li&gt;Create events for review sessions/campus wide events.&lt;/li&gt;
  &lt;li&gt;Inform others that you are going to the event by signing up.&lt;/li&gt;
  &lt;li&gt;Gain points for performing actions within the app to acquire tokens that can be used to ask more questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hoot/two.png&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/images/posts/hoot/three.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Feb 2015 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/hoot/</link>
        <guid isPermaLink="true">http://localhost:4000/hoot/</guid>
      </item>
    

    
      
        
      
    
      
    
      
    
      
        
          <item>
            <title>Categories</title>
            <description>Links to the different categories of projects listed throughout this site:

* [Flask](/tag/Flask/)
* [Python](/tag/Python/)
* [Swift](/tag/Swift/)
* [iOS](/tag/iOS/)
* [Javascript](/tag/Javascript/)
* [NodeJS](/tag/NodeJS/)
* [watchOS](/tag/watchOS/)
* [Augmented Reality](/tag/AugmentedReality/)
* [Scheme](/tag/Scheme/)
* [Functional Programming](/tag/FunctionalProgramming/)</description>
            <link>http://localhost:4000/tags.html</link>
          </item>
        
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    

  </channel>
</rss>